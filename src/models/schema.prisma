// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Customer {
  id           Int                @id @default(autoincrement())  
  name         String
  email        String             @unique
  phone        String             @unique
  city         String
  state        String
  country      String
  pincode      String
  password     String  
  isVerified   Boolean
  bookings     Booking[]
  otp          OTP[]
  reservations Reservation[]
  waitingList  WaitingList[]
  carRentals   RentalActive[]
}

model VehicleModel {
  id               Int                   @id @default(autoincrement())
  name             String
  make             String
  model            String
  type             String
  doors            Int
  seats            Int       
  description      String
  primaryImage     String
  additionalImages String[]
  quantity         Int                   @default(0)
  vehicles         VehicleInventory[]
}

model Location {
  id   Int     @id @default(autoincrement())
  name String
}

model VehicleInventory {
  id               Int                  @id @default(autoincrement())
  vin              String               @unique
  modelId          Int
  variant          String 
  year             Int
  color            String   
  transmission     String
  fuelType         String
  engineCapacity   Float
  mileage          Float
  pricePerDay      Float
  status           String               //available, booked, nops, maintenance, rented
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt

  model            VehicleModel         @relation(fields: [modelId], references: [id])
  reservations     Reservation[]
  rentals          RentalActive[]
  waitingList      WaitingList[]

}

model Booking {
  id               Int                  @id @default(autoincrement())
  customerId       Int
  vehicleId        Int    //vehicle inventory id
  pickupLocation   Int
  dropoffLocation  Int
  pickupDate       DateTime
  dropoffDate      DateTime
  pickupTime       DateTime
  dropoffTime      DateTime
  type             String
  status           String               // Pending, Confirmed, Cancelled
  createdAt        DateTime             @default(now())
  returnDate       DateTime?            // when vehicle is actually returned
  vehicleCondition String               //condition of vehicle when returned 

  customer         Customer             @relation(fields: [customerId], references: [id])
  payments         Payment[]            @relation("BookingPayments")
  billing          Billing?             @relation("BookingBilling")
  Rentals          RentalActive[]
}

//if the booking status is confirmed a reservation entry is created.If it is canceleld reservaion entry is deleted

model Reservation {
  id               Int                  @id @default(autoincrement())
  vehicleId        Int
  customerId       Int
  startDate        DateTime
  endDate          DateTime
  status           String     //active or upcoming
  returnStatus     String     //early, late

  vehicle          VehicleInventory     @relation(fields: [vehicleId], references: [id])
  customer         Customer             @relation(fields: [customerId], references: [id])
}

//current rental status of the vehicle variant.This table is created once the reservation day arrives.And is deleted once the reservation is deleted.If status is returned  then reservation table is updated

model RentalActive {
  id               Int                  @id @default(autoincrement())
  vehicleId        Int
  customerId       Int
  bookingId        Int
  dropOffDate      DateTime
  status           String               // Pending: incase customer didnt pickup , picked-up:customer picked up, returned
  vehicleCondition String               @default("N/A")//damage,good
  currentDate      DateTime             @default(now())


  vehicle          VehicleInventory     @relation(fields: [vehicleId], references: [id])
  customer         Customer             @relation(fields: [customerId], references: [id])
  booking          Booking              @relation(fields: [bookingId], references: [id])
}

model WaitingList {
  id               Int                  @id @default(autoincrement())
  customerId       Int
  vehicleId        Int
  bookingId        Int
  waitingListNumber Int

  customer         Customer             @relation(fields: [customerId], references: [id])
  vehicle          VehicleInventory         @relation(fields: [vehicleId], references: [id])
}

model Billing {
  id               Int                  @id @default(autoincrement())
  bookingId        Int                  @unique
  numberOfDays     Int
  baseCharges      Float
  fine             Float?
  additionalService Float?

  booking          Booking              @relation("BookingBilling", fields: [bookingId], references: [id])
}


model Payment {
  id               Int                  @id @default(autoincrement())
  bookingId        Int
  amount           Float
  paymentDate      DateTime             @default(now())
  paymentMethod    String
  status           String               // Completed, Pending, Failed

  booking          Booking              @relation("BookingPayments", fields: [bookingId], references: [id])
}


model OTP {
  id           Int      @id @default(autoincrement())
  customerId   Int
  otpValue     String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  customer     Customer @relation(fields: [customerId], references: [id])
}

